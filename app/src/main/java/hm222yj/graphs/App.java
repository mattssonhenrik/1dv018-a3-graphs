/*
 * This source file was generated by the Gradle 'init' task
 */
package hm222yj.graphs;

import hm222yj.graphs.graphs.directed.DirectedGraph;
import hm222yj.graphs.graphs.undirected.UnDirectedGraph;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        DirectedGraph directedGraph = new DirectedGraph(5);
        UnDirectedGraph unDirectedGraph = new UnDirectedGraph(5);

        // Directed
        directedGraph.addEdge(0, 1);
        directedGraph.addEdge(1, 2, 2.5);
        directedGraph.addEdge(2, 0);
        directedGraph.addEdge(3, 4);
        directedGraph.addEdge(0, 1);
        directedGraph.addEdge(0, 4);

        System.out.println("DIRECTED");
        System.out.println("Total nodes: " + directedGraph.nodeCount());
        System.out.println("Total edges: " + directedGraph.edgeCount());
        System.out.println("Degree for node 0:  " + directedGraph.degree(0));
        System.out.print("Nodes: ");
        for (int v : directedGraph.nodes()) {
            System.out.print(v + " ");
        }
        System.out.println();
        System.out.print("Neighbor for node 1 ");
        for (int w : directedGraph.neighbors(1)) {
            System.out.print(w + " ");
        }
        System.out.println();
        System.out.print("Edges: ");
        for (int[] e : directedGraph.edges())
            System.out.print("(" + e[0] + "->" + e[1] + ") ");
        System.out.println("\n");

        System.out.println("The weight of edge (1-3) is: " + directedGraph.weight(+1, 3));
        System.out.println("The weight of edge (1-2) is: " + directedGraph.weight(1, 2));
        System.out.println("Removing edge between 0 and 1!");
        directedGraph.removeEdge(0, 1);
        System.out.print("and now the edges are: ");
        for (int[] e : directedGraph.edges())
            System.out.print("(" + e[0] + "-" + e[1] + ") ");
        System.out.println("\n");

        // Undirected
        unDirectedGraph.addEdge(0, 1);
        unDirectedGraph.addEdge(1, 2, 3.0);
        unDirectedGraph.addEdge(2, 0);
        unDirectedGraph.addEdge(3, 4);
        unDirectedGraph.addEdge(2, 4);
        unDirectedGraph.addEdge(0, 2);
        System.out.println("");
        System.out.println("UNDIRECTED");
        System.out.println("Total nodes: " + unDirectedGraph.nodeCount());
        System.out.println("Total edges: " + unDirectedGraph.edgeCount());
        System.out.println("Degree for node 1: " + unDirectedGraph.degree(1));
        System.out.print("Nodes: ");
        for (int v : unDirectedGraph.nodes())
            System.out.print(v + " ");
        System.out.println();
        System.out.print("Neighbors for node 1: ");
        for (int w : unDirectedGraph.neighbors(1))
            System.out.print(w + " ");
        System.out.println();
        System.out.print("Edges: ");
        for (int[] e : unDirectedGraph.edges())
            System.out.print("(" + e[0] + "-" + e[1] + ") ");
        System.out.println();
        System.out.println("The weight of edge (1-3) is: " + unDirectedGraph.weight(+1, 3));
        System.out.println("The weight of edge (1-2) is: " + unDirectedGraph.weight(1, 2));
        System.out.println("Removing edge between 0 and 1!");
        unDirectedGraph.removeEdge(0, 1);
        System.out.print("and now the edges are: ");
        for (int[] e : unDirectedGraph.edges())
            System.out.print("(" + e[0] + "-" + e[1] + ") ");
        System.out.println();

    }
}
